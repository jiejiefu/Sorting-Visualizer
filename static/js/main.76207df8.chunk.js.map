{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/InsertionSort.js","SortingAlgorithms/HeapSort.js","SortingAlgorithms/SelectionSort.js","components/SortInfo/index.js","SortingVisualizer/SortingVisualizer.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","length","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","i","arraysAreEqual","startIndex","endIndex","middleIndex","Math","floor","sortArray","j","push","merge","MergeSortDesc","title","description","href","target","rel","worstCase","avgCase","bestCase","space","getQuickSortAnimations","quickSort","pivotIndex","min","max","random","swap","lessTailIndex","k","partitionArray","firstIndex","secondIndex","temp","QuickSortDesc","getBubbleSortAnimations","iters","swapped","bubbleSort","BubbleSortDesc","getInsertionSortAnimations","N","key","insertionSort","InsertionSortDesc","getHeapSortAnimations","currentIndex","heapify","buildMaxHeap","lastElement","heapSort","start","end","swapIndex","left","right","HeapSortDesc","getSelectionSortAnimations","minIndex","selectionSort","SelectionSortDesc","SortInfo","className","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","PRIMARY_COLOR","SECONDARY_COLOR","ENABLED_BUTTON","ALGORITHM_DESC","SortingVisualizer","props","state","desc","this","resetArray","addEventListener","showHeight","removeEventListener","setState","restoreStoreButtons","buttonTags","document","getElementsByTagName","disabled","buttonStyle","style","id","background","cursor","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","parseInt","algorithm","DONE_COLOR","animationsProgress","getElementById","barIndex","barStyle","innerHTML","Fragment","position","map","value","idx","onClick","getAnimations","class","type","onChange","React","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.76207df8.chunk.js","sourcesContent":["import React from 'react';\nexport function getMergeSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if(startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([\"comparision1\", i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([\"comparision2\", i, j]);\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([\"comparision1\", i, i]);\n        animations.push([\"comparision2\", i, i]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([\"comparision1\", j, j]);\n        animations.push([\"comparision2\", j, j]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        animations.push([\"comparision1\", i, i - startIndex]);\n        animations.push([\"overwrite\", i, sortArray[i - startIndex]]);\n        animations.push([\"comparision2\", i, i - startIndex]);\n        auxillaryArray[i] = sortArray[i - startIndex];\n        animations.push([\"done\", i, auxillaryArray[i]]);\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\n\n\nexport const MergeSortDesc = {\n    title: 'Merge Sort',\n    description: (\n      <div>\n        <p>\n          <a\n            href=\"https://en.wikipedia.org/wiki/Merge_sort\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Merge Sort\n          </a>{' '}\n          is an efficient, stable sorting algorith that makes use of the\n          divide and conquer strategy. Conceptually the algorithm works as\n          follows:\n        </p>\n        <ol>\n          <li>\n            Divide the unsorted list into <em>n</em> sublists, each\n            containing one element(a list of one element is considered\n            sorted)\n          </li>\n          <li>\n            Repeatedly merge sublists to produce new sorted sublists until\n            there is only one sublist remaining. This will be the sorted\n            list.\n          </li>\n        </ol>\n      </div>\n    ),\n    worstCase: (\n      <span>\n        O(<em>n</em> log <em>n</em>)\n      </span>\n    ),\n    avgCase: (\n      <span>\n        O(<em>n</em> log <em>n</em>)\n      </span>\n    ),\n    bestCase: (\n      <span>\n        O(<em>n</em> log <em>n</em>)\n      </span>\n    ),\n    space: (\n      <span>\n        O(<em>n</em>)\n      </span>\n    )\n  };","import React from 'react';\nexport function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n    // when pivot finally came to the end, among -2, -1, or = auxillaryArray.length, coloring all bars\n    if (pivotIndex >= auxillaryArray.length - 2)\n        for (let i = 0; i < auxillaryArray.length; i++)\n            animations.push([\"done\", i, auxillaryArray[i]]);\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    // Pick a random element as pivot.\n    let pivotIndex = randomIntFromInterval(startIndex, endIndex);\n    // Swap the pivot to the end, for the convenience of moving start pointer\n    animations.push([\"comparision1\", pivotIndex, endIndex]);\n    animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\n    animations.push([\"comparision2\", pivotIndex, endIndex]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n\n    // Index of smaller element and indicates the right position of pivot found so far\n    let lessTailIndex = startIndex;\n\n    for(let i = startIndex; i < endIndex; ++i) {\n        animations.push([\"comparision1\", i, endIndex]);\n        animations.push([\"comparision2\", i, endIndex]);\n        if(auxillaryArray[i] <= auxillaryArray[endIndex]) {\n            animations.push([\"comparision1\", i, lessTailIndex]);\n            animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\n            animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\n            animations.push([\"comparision2\", i, lessTailIndex]);\n            swap(auxillaryArray, i, lessTailIndex);\n            lessTailIndex++;\n        }\n    }\n    animations.push([\"comparision1\", lessTailIndex, endIndex]);\n    animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\n    animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\n    animations.push([\"comparision2\", lessTailIndex, endIndex]);\n    swap(auxillaryArray, lessTailIndex, endIndex);\n    for (let j = startIndex; j < lessTailIndex; j++) animations.push([\"done\", j, auxillaryArray[j]]);\n    for (let k = lessTailIndex+1; k <= endIndex; k++) animations.push([\"done\", k, auxillaryArray[k]]);\n    return lessTailIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n\n\nexport const QuickSortDesc = {\n    title: 'Quick Sort',\n    description: (\n      <div>\n        <p>\n          <a\n            href=\"https://en.wikipedia.org/wiki/Quicksort\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Quick Sort\n          </a>{' '}\n          is an efficient, in-place sorting algorith that in practice is\n          faster than MergeSort and HeapSort. However, it is not a stable\n          sorting algorithm, meaning that the relative positioning of\n          equal sort items is not preserved.Quicksort is a divide and\n          conquer algorithm. Quicksort first divides a large array into\n          two smaller sub-arrays: the low elements and the high elements.\n          Quicksort can then recursively sort the sub-arrays. The steps\n          are:\n        </p>\n        <ol>\n          <li>\n            Pick an element, called a pivot, from the array. This is\n            usually done at random.\n          </li>\n          <li>Move pivot element to the start of the array.</li>\n          <li>\n            <em>Partitioning:</em> reorder the array so that all elements\n            with values less than the pivot come before the pivot, while\n            all elements with values greater than the pivot come after it\n            (equal values can go either way). After this partitioning, the\n            pivot is in its final position. This is called the{' '}\n            <em>partition</em> operation.\n          </li>\n          <li>\n            Recursively apply the above steps to the sub-array of elements\n            with smaller values and separately to the sub-array of\n            elements with greater values.\n          </li>\n        </ol>\n        <p>\n          The base case of the recursion is an array of size zero or one,\n          which are sorted by definition.\n        </p>\n      </div>\n    ),\n    worstCase: (\n      <span>\n        O(<em>n</em>\n        <sup>2</sup>)\n      </span>\n    ),\n    avgCase: (\n      <span>\n        O(<em>n</em>log<em>n</em>)\n      </span>\n    ),\n    bestCase: (\n      <span>\n        O(<em>n</em>log<em>n</em>)\n      </span>\n    ),\n    space: (\n      <span>\n        O(log<em>n</em>)\n      </span>\n    )\n  };","import React from 'react';\nexport function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    let iters = N - 1;\n    while(iters > 0) {\n        let swapped = false;\n        for(let i = 0; i < iters; ++i) {\n            animations.push([\"comparision1\", i, i + 1]);\n            animations.push([\"comparision2\", i, i + 1]);\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\n                swapped = true;\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n                swap(auxillaryArray, i, i + 1);\n            }\n        }\n        // after each for-loop, the biggest bubble in the remaining iters will surface\n        animations.push([\"done\", iters, auxillaryArray[iters]]);\n        if(swapped === false) break;\n        iters--;\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\n\n\nexport const BubbleSortDesc = {\n    title: 'Bubble Sort',\n    description: (\n      <p>\n        <a\n          href=\"https://en.wikipedia.org/wiki/Bubble_sort\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Bubble Sort\n        </a>{' '}\n        is a simple sorting algorithm that repeatedly steps through the\n        list, compares adjacent elements and swaps them if they are in the\n        wrong order.The pass through the list is repeated until the list\n        is sorted. The algorithm, which is a comparison sort, is named for\n        the way smaller or larger elements \"bubble\" to the top of the\n        list. Although the algorithm is simple, it is too slow and\n        impractical for most problems\n      </p>\n    ),\n    worstCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    avgCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    bestCase: <span>O(n)</span>,\n    space: <span>O(1)</span>\n  };","import React from 'react';\nexport function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n        for (let k = 0; k <= i; k++) animations.push([\"done\", k, auxillaryArray[k]]);\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\n\n\nexport const InsertionSortDesc = {\n    title: 'Insertion Sort',\n    description: (\n      <p>\n        <a\n          href=\"https://en.wikipedia.org/wiki/Insertion_sort\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Insertion Sort\n        </a>{' '}\n        is a simple sorting algorithm that iterates through an array and\n        at each iteration it removes one element from the array, finds the\n        location it belongs to in the sorted list and inserts it there,\n        repeating until no elements remain in the unsorted list. It is an\n        in-place, stable sorting algorithm that is inefficient on large\n        input arrays but works well for data sets that are almost sorted.\n        It is more efficient in practice compared to other quadratic\n        sorting algorithms like bubble sort and selection sort.\n      </p>\n    ),\n    worstCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    avgCase: (\n      <span>\n        O(n<sup>2</sup>)\n      </span>\n    ),\n    bestCase: <span>O(n)</span>,\n    space: <span>O(1)</span>\n  };","import React from 'react';\r\nexport function getHeapSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    heapSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction heapSort(auxillaryArray, animations) {\r\n    // Build max heap\r\n    buildMaxHeap(auxillaryArray, animations);\r\n    const N = auxillaryArray.length;\r\n    // Get the index of the last element\r\n    let lastElement = N - 1;\r\n\r\n    // Continue heap sorting until we have One element left\r\n    while (lastElement >= 0) { // add equal sign for the purpose to color the very last Element \"zero\" index. \r\n        animations.push([\"swap\", 0, auxillaryArray[lastElement]]);\r\n        animations.push([\"swap\", lastElement, auxillaryArray[0]]);\r\n        animations.push([\"done\", lastElement, auxillaryArray[0]]);\r\n        swap(auxillaryArray, 0, lastElement);\r\n        heapify(auxillaryArray, 0, lastElement, animations);\r\n        lastElement--;\r\n    }\r\n}\r\n\r\nfunction buildMaxHeap(array, animations) {\r\n    let currentIndex = Math.floor(array.length / 2);\r\n    while (currentIndex >= 0) {\r\n        heapify(array, currentIndex, array.length, animations);\r\n        currentIndex--;\r\n    }\r\n  }\r\n\r\nfunction heapify(array, start, end, animations) {\r\n    if (start >= Math.floor(end / 2)) {\r\n        return;\r\n    }\r\n    let left = start * 2 + 1,\r\n        right = start * 2 + 2 < end ? start * 2 + 2 : null,swapIndex;\r\n    if (right) {\r\n        swapIndex = array[left] > array[right] ? left : right;\r\n    } else {\r\n        swapIndex = left;\r\n    }\r\n    animations.push([\"comparision1\", start, swapIndex]);\r\n    animations.push([\"comparision2\", start, swapIndex]);\r\n    if (array[start] < array[swapIndex]) {\r\n        animations.push([\"swap\", start, array[swapIndex]]);\r\n        animations.push([\"swap\", swapIndex, array[start]]);\r\n        swap(array, start, swapIndex);\r\n        heapify(array, swapIndex, end, animations);\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n\r\nexport const HeapSortDesc = {\r\n    title: 'Heap Sort',\r\n    description: (\r\n      <div>\r\n        <p>\r\n          <a\r\n            href=\"https://en.wikipedia.org/wiki/Heapsort\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Heap Sort\r\n          </a>{' '}\r\n          can be thought of as an improved selection sort that uses the\r\n          heap data structure rather than a linear-time search to find the\r\n          maximum or minimum element. It is an in-place sorting algorithm\r\n          that is not stable and has a somewhat slower running time than\r\n          Quicksort in practice.\r\n        </p>\r\n        <p>\r\n          The heapsort algorithm can be divided into two parts. In the\r\n          first step, a heap is built out of the data. The heap is often\r\n          placed in an array with the layout of a complete binary tree. In\r\n          the second step, a sorted array is created by repeatedly\r\n          removing the largest element from the heap (the root of the\r\n          heap), and inserting it into the array. The heap is updated\r\n          after each removal to maintain the heap property. Once all\r\n          objects have been removed from the heap, the result is a sorted\r\n          array.\r\n        </p>\r\n        <ol>\r\n          <li>\r\n            Call the buildMaxHeap() function on the list. Also referred to\r\n            as heapify(), this builds a heap from a list in O(n)\r\n            operations.\r\n          </li>\r\n          <li>\r\n            Swap the first element of the list with the final element.\r\n            Decrease the considered range of the list by one.\r\n          </li>\r\n          <li>\r\n            Call the <em>siftDown()</em>, also called{' '}\r\n            <em>maxHeapify()</em> function on the list to sift the new\r\n            first element to its appropriate index in the heap.\r\n          </li>\r\n          <li>\r\n            Go to step (2) unless the considered range of the list is one\r\n            element.\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    ),\r\n    worstCase: (\r\n      <span>\r\n        O(<em>n</em> log <em>n</em>)\r\n      </span>\r\n    ),\r\n    avgCase: (\r\n      <span>\r\n        O(<em>n</em> log <em>n</em>)\r\n      </span>\r\n    ),\r\n    bestCase: (\r\n      <span>\r\n        O(<em>n</em> log <em>n</em>)\r\n      </span>\r\n    ),\r\n    space: <span>O(1)</span>\r\n  };","import React from 'react';\nexport function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i <= N - 1; i++) { // equal sign for coloring\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        animations.push([\"done\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\n\n\nexport const SelectionSortDesc = {\n  title: 'Selection Sort',\n  description: (\n    <p>\n      <a\n        href=\"https://en.wikipedia.org/wiki/Selection_sort\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Selection Sort\n      </a>{' '}\n      is an in-place comparison sorting algorithm that divides the input\n      list into two parts: the sublist of items already sorted, which is\n      built up from left to right at the front (left) of the list, and\n      the sublist of items remaining to be sorted that occupy the rest\n      of the list. Initially, the sorted sublist is empty and the\n      unsorted sublist is the entire input list. The algorithm proceeds\n      by finding the smallest element in the unsorted sublist,\n      exchanging (swapping) it with the leftmost unsorted element\n      (putting it in sorted order), and moving the sublist boundaries\n      one element to the right.\n    </p>\n  ),\n  worstCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  avgCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  bestCase: (\n    <span>\n      O(n<sup>2</sup>)\n    </span>\n  ),\n  space: <span>O(1)</span>\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\n// https://github.com/ramiz-rahman/sort-visualizer/blob/bb8201ddba3dcee7fc04f79b7423bc4e5e049bf5/src/components/molecules/SortInfo/index.js\nconst SortInfo = ({\n  title,\n  description,\n  worstCase,\n  avgCase,\n  bestCase,\n  space\n}) => {\n  return (\n    <div className=\"SortInfo\">\n      <hr />\n      <h1>{title ? title : 'Select Algorithm'}</h1>\n\n      <div className=\"SortInfo__Body\">\n        <article className=\"SortInfo__Article\">\n          {description ? (\n            description\n          ) : (\n            <p>\n              Please select an algorithm before you can visualize it's\n              execution on an array of numbers.\n            </p>\n          )}\n        </article>\n\n        <aside className=\"SortInfo__Aside\">\n          <h3>Performance</h3>\n          <table>\n            <tbody>\n              <tr>\n                <td>Worst-case time complexity</td>\n                <td>\n                  <code>{worstCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Average time complexity</td>\n                <td>\n                  <code>{avgCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Best-case time complexity</td>\n                <td>\n                  <code>{bestCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Worst-case space complexity</td>\n                <td>\n                  <code>{space}</code>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </aside>\n      </div>\n    </div>\n  );\n};\n\nSortInfo.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.object,\n  worstCase: PropTypes.object,\n  avgCase: PropTypes.object,\n  bestCase: PropTypes.object,\n  space: PropTypes.object\n};\n\nexport default SortInfo;\n","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations, MergeSortDesc} from '../SortingAlgorithms/MergeSort';\nimport {getQuickSortAnimations, QuickSortDesc} from '../SortingAlgorithms/QuickSort';\nimport {getBubbleSortAnimations, BubbleSortDesc} from '../SortingAlgorithms/BubbleSort';\nimport {getInsertionSortAnimations, InsertionSortDesc} from '../SortingAlgorithms/InsertionSort';\nimport {getHeapSortAnimations, HeapSortDesc} from '../SortingAlgorithms/HeapSort';\nimport {getSelectionSortAnimations, SelectionSortDesc} from '../SortingAlgorithms/SelectionSort';\nimport SortInfo from '../components/SortInfo';\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = 57;\nlet ANIMATION_SPEED_MS = 5; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\nconst PRIMARY_COLOR = 'PaleTurquoise'; //Normal color of bars\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\n\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = \"Currently Disabled\";\nconst ENABLED_BUTTON = {\n    nlogn: \"O(NlogN) Time Complexity\",\n    nSquare: \"O(N^2) Time Complexity\"\n}\n\nconst ALGORITHM_DESC = {\n    'Bubble Sort': BubbleSortDesc,\n    'Selection Sort': SelectionSortDesc,\n    'Insertion Sort': InsertionSortDesc,\n    'Merge Sort': MergeSortDesc,\n    'Quick Sort': QuickSortDesc,\n    // 'Quick Sort 3': QuickSort3Desc,\n    'Heap Sort': HeapSortDesc,\n    // 'Shell Sort': ShellSortDesc\n  };\n// @CSALS\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            desc: {}\n        };\n    }\n    componentDidMount() {\n        this.resetArray();\n        window.addEventListener('load', this.showHeight);\n    }\n    componentWillUnmount() { \n        window.removeEventListener('load', this.showHeight)  \n    }\n    //Generates new random array \n    resetArray() {\n        const array = []\n        // NUMBER_OF_ARRAY_BARS = document.getElementById(\"sizeSlider\").value; //Need to change bar weight as well to place all bars into WINDOW_WIDTH\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\n            array.push(randomIntFromInterval(25,WINDOW_HEIGHT-50)); //random array\n        }\n        this.setState({array: array});\n        this.restoreStoreButtons();\n    }\n    showHeight() {\n        // *** make showHeight(button) to be a boolean variable to toggle ***\n        let showHeight = false;\n        if (showHeight == true) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            for (let i = 0;i < arrayBars.length;i++) {\n                // if (arrayBars[i].matches(':hover')) console.log(arrayBars[i].offsetHeight);\n                let barHeight = arrayBars[i].offsetHeight;\n                arrayBars[i].addEventListener('mouseenter', () => {\n                    if (arrayBars[i].childNodes.length == 0) {\n                        let span = document.createElement(\"span\");\n                        span.style.position = \"absolute\";\n                        span.innerHTML = barHeight;\n                        arrayBars[i].appendChild(span);\n                    } else if (barHeight != arrayBars[i].childNodes[0].innerHTML) {\n                        arrayBars[i].childNodes[0].innerHTML = barHeight;\n                    }\n                });\n            }\n        }\n    }\n    restoreStoreButtons() {\n        let buttonTags = document.getElementsByTagName(\"button\");\n        // console.log(buttonTags);\n        for (let i = 1; i < buttonTags.length; i++) {\n            buttonTags[i].disabled = false; // can be clicked\n            let buttonStyle = buttonTags[i].style;\n            buttonTags[i].title = ENABLED_BUTTON.nSquare;\n            if (buttonTags[i].id === \"mergeSort\" || buttonTags[i].id === \"heapSort\")\n                buttonTags[i].title = ENABLED_BUTTON.nlogn;\n            buttonStyle.background = \"#47535E\";\n            buttonStyle.cursor = \"pointer\";\n        }\n    }\n    disableSortButtons() {\n        let buttonTags = document.getElementsByTagName(\"button\");\n        // i = 0 button = \"Generate New Array\"\n        for (let i = 1; i < buttonTags.length; i++) {\n            buttonTags[i].disabled = true;\n            let buttonStyle = buttonTags[i].style;\n            buttonTags[i].title = DISABLED_BUTTON;\n            buttonStyle.cursor = \"default\";\n            buttonStyle.background = \"#000000\";\n        }\n    }\n    //Sorting Algorithms\n    mergeSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\n        // console.log(animations);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n                \n            }\n            else {\n                setTimeout(() => {\n                    const [overwrite, barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n\n    getAnimations(algorithm) {\n        this.disableSortButtons();\n        let animations, sortArray = [];\n        let DONE_COLOR;\n        switch (algorithm) {\n            case 'Merge Sort': {\n                [animations,sortArray] = getMergeSortAnimations(this.state.array);\n                DONE_COLOR = 'BlanchedAlmond';\n                break;\n            }\n            case 'Quick Sort': {\n                [animations,sortArray] = getQuickSortAnimations(this.state.array);\n                DONE_COLOR = 'LightPink';\n                break;\n            }\n            case 'Bubble Sort': {\n                [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n                DONE_COLOR = 'LightSkyBlue';\n                break;\n            }\n            case 'Insertion Sort': {\n                [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n                DONE_COLOR = 'Plum';\n                break;\n            }\n            case 'Heap Sort': {\n                [animations,sortArray] = getHeapSortAnimations(this.state.array);\n                DONE_COLOR = 'Pink';\n                break;\n            }\n            case 'Selection Sort': {\n                [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n                DONE_COLOR = 'DarkSeaGreen';\n                break;\n            }\n            default:\n                break;\n        }\n        if (animations && animations.length > 0) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const animationsProgress = document.getElementById('animationsProgress');\n\n            for (let i = 0; i < animations.length; i++) {\n                const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n                \n                if(isColorChange === true) {\n                    const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                    const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                    const barOneStyle = arrayBars[barOneIndex].style;\n                    const barTwoStyle = arrayBars[barTwoIndex].style;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    },i * ANIMATION_SPEED_MS);\n                }\n                else {\n                    const [swap, barIndex, newHeight] = animations[i];\n                    if (barIndex === -1) {\n                        continue;\n                    }\n                    const barStyle = arrayBars[barIndex].style;\n                    setTimeout(() => {\n                        barStyle.height = `${newHeight}px`;\n                        if (swap == \"done\") barStyle.backgroundColor = DONE_COLOR;\n                    },i * ANIMATION_SPEED_MS);  \n                }\n                // show the progress of animations\n                setTimeout(() => {\n                    animationsProgress.innerHTML = `${i+1} / ${animations.length}`;\n                    this.showHeight();\n                },i * ANIMATION_SPEED_MS);\n            }\n            // this.setState({array: sortArray})\n            const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n            setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n            this.setState({desc: ALGORITHM_DESC[algorithm]});\n        }\n    }\n    quickSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    bubbleSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    insertionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    heapSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getHeapSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    selectionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    render() {\n        const array = this.state.array;\n        const desc = this.state.desc;\n        const SORT_BUTTONS = 7;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        return(\n            <React.Fragment>\n            <div className=\"array-container\" style={{position:'absolute', right:'20px'}}>\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`\n                        }}\n                    ></div>\n                ))}\n            </div>\n            <div className=\"buttons\" > \n                <button title=\"Generates a new random array\" style={{position:'relative',left:`${0*(WINDOW_WIDTH-20)/TOTAL_BUTTONS}px`}} onClick={() => this.resetArray()}>\n                    Generate New Array\n                </button>\n                <button title=\"O(NlogN) Time Complexity\" id = \"mergeSort\" style={{position:'relative',left:`${0.5*(WINDOW_WIDTH-20)/TOTAL_BUTTONS}px`}} onClick={() => this.getAnimations('Merge Sort')}>\n                    Merge Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"quickSort\" style={{position:'relative',left:`${1.0*(WINDOW_WIDTH-20)/TOTAL_BUTTONS}px`}} onClick={() => this.getAnimations('Quick Sort')}>\n                    Quick Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\" style={{position:'relative',left:`${1.5*(WINDOW_WIDTH-20)/TOTAL_BUTTONS}px`}} onClick={() => this.getAnimations('Bubble Sort')}>\n                    Bubble Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"insertionSort\" style={{position:'relative',left:`${2.0*(WINDOW_WIDTH-20)/TOTAL_BUTTONS}px`}} onClick={() => this.getAnimations('Insertion Sort')}>\n                    Insertion Sort\n                </button>\n                <button title=\"O(NlogN) Time Complexity\" id = \"heapSort\" style={{position:'relative',left:`${2.5*(WINDOW_WIDTH-20)/TOTAL_BUTTONS}px`}} onClick={() => this.getAnimations('Heap Sort')}>\n                    Heap Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"selectionSort\" style={{position:'relative',left:`${3.0*(WINDOW_WIDTH-20)/TOTAL_BUTTONS}px`}} onClick={() => this.getAnimations('Selection Sort')}>\n                    Selection Sort\n                </button>\n            </div>    \n            <h2>Progress <br/>\n                <span id = \"animationsProgress\"></span>\n            </h2>\n            <div class=\"slidecontainer\">\n                <input type=\"range\" min=\"1\" max=\"100\" value=\"57\" id=\"sizeSlider\" onChange={()=> this.resetArray()}/>\n            </div>\n            <div className=\"algorithm-container\">\n                <SortInfo {...desc} />\n            </div>\n            \n            </React.Fragment>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;\n\n\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport './App.css'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer />\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}